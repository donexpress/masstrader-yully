# def getKeyword(keywords, messages)
#   key = []
#   start_datetime = DateTime.parse(@date)
#   end_datetime = start_datetime.at_end_of_day()
#   start_utc_offset = Time.parse(start_datetime.to_date.to_s).in_time_zone('America/Mexico_City').utc_offset
#   end_utc_offset = Time.parse(end_datetime.to_date.to_s).in_time_zone('America/Mexico_City').utc_offset
#   shifted_start_datetime = start_datetime - start_utc_offset.seconds
#   shifted_end_datetime = end_datetime - end_utc_offset.seconds
#   keywords.each do |keyword|
#     messages.each do |message|
#       if(message.body.start_with?("cod_"))
#         cKye = message.body.split(",").last
#         if(cKye == keyword && shifted_start_datetime < message.sent_at && message.sent_at < shifted_end_datetime)
#           found = false
#               key.each do |added|
#                 if(added == keyword)
#                   found = true
#                 end
#               end
#               if(!found)
#                 key.append(keyword)
#               end
#         end
#       end
#     end
#   end
#   key.join(", ")
# end

def checkMessageDate(message)
  if !@date.present?
    start_datetime = DateTime.now
  else 
    start_datetime = DateTime.parse(@date)
  end
  # start_datetime = DateTime.parse(@date)
  end_datetime = start_datetime.at_end_of_day()
  start_utc_offset = Time.parse(start_datetime.to_date.to_s).in_time_zone('America/Mexico_City').utc_offset
  end_utc_offset = Time.parse(end_datetime.to_date.to_s).in_time_zone('America/Mexico_City').utc_offset
  shifted_start_datetime = start_datetime - start_utc_offset.seconds
  shifted_end_datetime = end_datetime - end_utc_offset.seconds
  if !@date.present?
    true
  elsif(message && message.sent_at)
    shifted_start_datetime < message.sent_at && message.sent_at < shifted_end_datetime
  else
    false
  end
end

def restOfMessages(messages, firstIndex)
  rest = []
  continue = true;
  messages.each_with_index do |message, index|
    if index > firstIndex && !message.body.start_with?("cod_") && continue
      rest.append(message.body)
    elsif index > firstIndex && message.body.start_with?("cod_")
      continue = false
    end
  end
  rest
end

wb = xlsx_package.workbook
head_style = wb.styles.add_style bg_color: "DDDDDD",  b: true
wb.use_autowidth = false
if !@date.present?
  head = ["Date","Keyword", "Phone number", @date]
else
  head = ["Keyword", "Phone number", @date]
end
rows = []

wb.add_worksheet(name: "Conversations") do |sheet|
  # Create the header row
  sheet.add_row head
  sheet.row_style 0, head_style
  widths = [20,20]
  @items.each do |item|
    if !@date.present? 
      row = [item.latest_outgoing_sent_at ,item.keywords.join(", "), item.client_phone_number]
    else
      row = [item.keywords.join(", "), item.client_phone_number]
    end
    item.messages.each_with_index do |message, index|
      if checkMessageDate(message) || @sort == 'unread_message' || @sort == 'no_keyword'
        row.append(message.body)
        if(row.size > widths.size)
          widths.append(40)
        end
      end
    end
      row.append(" ")
      sheet.add_row row
      row = []
  end
  sheet.column_widths(*widths)
end